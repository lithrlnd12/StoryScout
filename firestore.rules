rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /publicContent/{document=**} {
      allow read: if true;
      allow write: if request.auth != null; // Authenticated users can write
    }

    match /users/{userId}/{document=**} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    // Engagements: users can create/read their own, read others
    match /engagements/{engagementId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Reviews: users can create/update/delete their own, read all
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Watch Parties: authenticated users can create, anyone can read, host/participants can update
    match /watchParties/{partyId} {
      allow read: if true; // Anyone can read parties (for joining)
      allow create: if request.auth != null; // Authenticated users can create parties

      // Allow update for authenticated users (the function will validate participants)
      allow update: if request.auth != null;

      // Only host can delete
      allow delete: if request.auth != null && resource.data.hostUserId == request.auth.uid;
    }

    // Watch Party Chat: participants can send messages, anyone can read
    match /watchParties/{partyId}/messages/{messageId} {
      allow read: if true; // Anyone can read messages (allows guest viewing on Roku)

      // Allow create if:
      // 1. User provides their userId in the message
      // 2. Message is not empty and under 200 chars
      // 3. Has required fields
      allow create: if request.resource.data.userId != null
                    && request.resource.data.displayName != null
                    && request.resource.data.platform != null
                    && request.resource.data.message != null
                    && request.resource.data.message.size() > 0
                    && request.resource.data.message.size() <= 200
                    && request.resource.data.timestamp != null;

      // Messages are immutable - cannot be edited or deleted via client
      allow update, delete: if false;
    }

    // Voice Chat Signaling: WebRTC connection metadata
    match /watchParties/{partyId}/voiceSignals/{userId} {
      allow read: if true; // Anyone can read signals (for P2P WebRTC)

      // Allow create/update for authenticated users
      // Stores: userId, displayName, peerId, isMuted, isSpeaking, signals (map), timestamp
      // No strict validation since WebRTC signaling needs flexibility
      allow create, update: if request.auth != null;

      // Users can delete their own signals, or anyone can delete if party is ending
      allow delete: if request.auth != null;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
